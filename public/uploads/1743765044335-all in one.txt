### 1. Graph Using an Adjacency Matrix 
**Functionality:** 
• Accept vertices and edges and store in an adjacency matrix. 
• Display the adjacency matrix. 
• Compute and print the indegree for all vertices.
```c
// File: Graph_AdjMatrix_Indegree.c
#include <stdio.h>
#include <stdlib.h>
int main() {
 int vertices, edges;
 printf("Enter number of vertices: ");
 scanf("%d", &vertices);
 printf("Enter number of edges: ");
 scanf("%d", &edges);
 // Allocate adjacency matrix dynamically.
 int **adjMatrix = malloc(vertices * sizeof(int *));
 for (int i = 0; i < vertices; i++) {
 adjMatrix[i] = calloc(vertices, sizeof(int));
 }
 printf("Enter each edge (u v) [vertex numbering starts at 0]:\n");
 for (int i = 0; i < edges; i++) {
 int u, v;
 scanf("%d %d", &u, &v);
 if(u >= 0 && u < vertices && v >= 0 && v < vertices)
 adjMatrix[u][v] = 1;
 }
 // Display the matrix.
 printf("\nAdjacency Matrix:\n");
 for (int i = 0; i < vertices; i++){
 for (int j = 0; j < vertices; j++){
 printf("%d ", adjMatrix[i][j]);
 }
 printf("\n");
 }
 // Compute and print the indegree for each vertex.
 printf("\nIndegree of each vertex:\n");
 for (int j = 0; j < vertices; j++){
 int indegree = 0;
 for (int i = 0; i < vertices; i++){
 if(adjMatrix[i][j] == 1)
 indegree++;
 }
 printf("Vertex %d: %d\n", j, indegree);
 }
 // Free the allocated memory.
 for (int i = 0; i < vertices; i++){
 free(adjMatrix[i]);
 }
 free(adjMatrix);
 return 0;
}
```
---
### 2. Graph Traversal Using BFS (Adjacency Matrix) 
**Functionality:** 
• Create the adjacency matrix as before. 
• Traverse the graph using Breadth First Search (BFS).
```c
// File: Graph_AdjMatrix_BFS.c
#include <stdio.h>
#include <stdlib.h>
#define MAX_QUEUE 100
// Simple queue implementation.
typedef struct {
 int items[MAX_QUEUE];
 int front, rear;
} Queue;
void initQueue(Queue *q) {
 q->front = 0;
 q->rear = -1;
}
int isEmpty(Queue *q) {
 return q->rear < q->front;
}
void enqueue(Queue *q, int value) {
 if(q->rear < MAX_QUEUE - 1)
 q->items[++q->rear] = value;
}
int dequeue(Queue *q) {
 if(!isEmpty(q))
 return q->items[q->front++];
 return -1;
}
int main() {
 int vertices, edges;
 printf("Enter number of vertices: ");
 scanf("%d", &vertices);
 printf("Enter number of edges: ");
 scanf("%d", &edges);
 // Build the adjacency matrix.
 int **matrix = malloc(vertices * sizeof(int *));
 for (int i = 0; i < vertices; i++)
 matrix[i] = calloc(vertices, sizeof(int));
 printf("Enter each edge (u v) [0-indexed]:\n");
 for (int i = 0; i < edges; i++){
 int u, v;
 scanf("%d %d", &u, &v);
 if(u >= 0 && u < vertices && v >= 0 && v < vertices)
 matrix[u][v] = 1;
 }
 
 int start;
 printf("Enter the starting vertex for BFS: ");
 scanf("%d", &start);
 
 int *visited = calloc(vertices, sizeof(int));
 Queue q;
 initQueue(&q);
 visited[start] = 1;
 enqueue(&q, start);
 
 printf("\nBFS Traversal starting from vertex %d: ", start);
 while(!isEmpty(&q)) {
 int curr = dequeue(&q);
 printf("%d ", curr);
 for (int i = 0; i < vertices; i++) {
 if(matrix[curr][i] && !visited[i]) {
 visited[i] = 1;
 enqueue(&q, i);
 }
 }
 }
 printf("\n");
 
 free(visited);
 for (int i = 0; i < vertices; i++)
 free(matrix[i]);
 free(matrix);
 
 return 0;
}
```
---
### 3. Graph Traversal Using DFS (Adjacency Matrix) 
**Functionality:** 
• Create and populate the adjacency matrix. 
• Traverse the graph using recursive Depth First Search (DFS).
```c
// File: Graph_AdjMatrix_DFS.c
#include <stdio.h>
#include <stdlib.h>
void DFS(int **matrix, int vertices, int vertex, int *visited) {
 visited[vertex] = 1;
 printf("%d ", vertex);
 for (int i = 0; i < vertices; i++) {
 if(matrix[vertex][i] && !visited[i])
 DFS(matrix, vertices, i, visited);
 }
}
int main() {
 int vertices, edges;
 printf("Enter number of vertices: ");
 scanf("%d", &vertices);
 printf("Enter number of edges: ");
 scanf("%d", &edges);
 // Build the adjacency matrix.
 int **matrix = malloc(vertices * sizeof(int *));
 for (int i = 0; i < vertices; i++)
 matrix[i] = calloc(vertices, sizeof(int));
 
 printf("Enter each edge (u v) [0-indexed]:\n");
 for (int i = 0; i < edges; i++){
 int u, v;
 scanf("%d %d", &u, &v);
 if(u >= 0 && u < vertices && v >= 0 && v < vertices)
 matrix[u][v] = 1;
 }
 
 int start;
 printf("Enter starting vertex for DFS: ");
 scanf("%d", &start);
 int *visited = calloc(vertices, sizeof(int));
 printf("\nDFS Traversal starting from vertex %d: ", start);
 DFS(matrix, vertices, start, visited);
 printf("\n");
 free(visited);
 for (int i = 0; i < vertices; i++)
 free(matrix[i]);
 free(matrix);
 
 return 0;
}
```
---
### 4. Graph Using an Adjacency List 
**Functionality:** 
• Accept vertices and edges and store the graph using linked lists. 
• Display the complete adjacency list.
```c
// File: Graph_AdjList.c
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int vertex;
 struct Node *next;
} Node;
Node* createNode(int vertex) {
 Node *newNode = malloc(sizeof(Node));
 newNode->vertex = vertex;
 newNode->next = NULL;
 return newNode;
}
void addEdge(Node **adjList, int u, int v) {
 Node *newNode = createNode(v);
 newNode->next = adjList[u];
 adjList[u] = newNode;
}
void displayGraph(Node **adjList, int vertices) {
 for (int i = 0; i < vertices; i++){
 printf("Vertex %d: ", i);
 Node *temp = adjList[i];
 while(temp != NULL) {
 printf("-> %d ", temp->vertex);
 temp = temp->next;
 }
 printf("\n");
 }
}
int main() {
 int vertices, edges;
 printf("Enter number of vertices: ");
 scanf("%d", &vertices);
 printf("Enter number of edges: ");
 scanf("%d", &edges);
 // Create an array of linked-list pointers.
 Node **adjList = malloc(vertices * sizeof(Node *));
 for (int i = 0; i < vertices; i++)
 adjList[i] = NULL;
 printf("Enter each edge (u v) [0-indexed]:\n");
 for (int i = 0; i < edges; i++){
 int u, v;
 scanf("%d %d", &u, &v);
 if(u >= 0 && u < vertices && v >= 0 && v < vertices)
 addEdge(adjList, u, v);
 }
 
 printf("\nAdjacency List:\n");
 displayGraph(adjList, vertices);
 // Free allocated memory.
 for (int i = 0; i < vertices; i++){
 Node *temp = adjList[i];
 while(temp) {
 Node *t = temp;
 temp = temp->next;
 free(t);
 }
 }
 free(adjList);
 
 return 0;
}
```
---
## BST Problems
### 1. BST – Create, Insert & Inorder Traversal 
**Functionality:** 
• Use a BST library that provides a function to create a new node and insert 
nodes into the BST. 
• Traverse the tree using inorder traversal.
```c
// File: BST_Inorder.c
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node *left, *right;
} Node;
Node* createNode(int data) {
 Node *newNode = malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
Node* insert(Node *root, int data) {
 if(root == NULL)
 return createNode(data);
 if(data < root->data)
 root->left = insert(root->left, data);
 else
 root->right = insert(root->right, data);
 return root;
}
void inorder(Node *root) {
 if(root) {
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
 }
}
int main() {
 Node *root = NULL;
 int choice, data;
 
 while(1) {
 printf("\nBST Menu (Inorder Traversal):\n");
 printf("1. Insert Node\n");
 printf("2. Display Inorder Traversal\n");
 printf("3. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 if(choice == 1) {
 printf("Enter number to insert: ");
 scanf("%d", &data);
 root = insert(root, data);
 } else if(choice == 2) {
 printf("Inorder Traversal: ");
 inorder(root);
 printf("\n");
 } else if(choice == 3) {
 break;
 } else {
 printf("Invalid choice.\n");
 }
 }
 return 0;
}
```
---
### 2. BST – Create, Search & Preorder Traversal 
**Functionality:** 
• Insert nodes into a BST. 
• Traverse using preorder and search for a specified key.
```c
// File: BST_Preorder_Search.c
#include <stdio.h>
#include <stdlib.h>
typedef struct BSTNode {
 int data;
 struct BSTNode *left, *right;
} BSTNode;
BSTNode* createNode(int data) {
 BSTNode* newNode = malloc(sizeof(BSTNode));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
BSTNode* insert(BSTNode *root, int data) {
 if(root == NULL)
 return createNode(data);
 if(data < root->data)
 root->left = insert(root->left, data);
 else
 root->right = insert(root->right, data);
 return root;
}
void preorder(BSTNode *root) {
 if(root) {
 printf("%d ", root->data);
 preorder(root->left);
 preorder(root->right);
 }
}
BSTNode* search(BSTNode *root, int key) {
 if(root == NULL || root->data == key)
 return root;
 if(key < root->data)
 return search(root->left, key);
 else
 return search(root->right, key);
}
int main() {
 BSTNode *root = NULL;
 int choice, data, key;
 BSTNode *found = NULL;
 
 while(1) {
 printf("\nBST Menu (Preorder & Search):\n");
 printf("1. Insert Node\n");
 printf("2. Preorder Traversal\n");
 printf("3. Search for a Key\n");
 printf("4. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 if(choice == 1) {
 printf("Enter number to insert: ");
 scanf("%d", &data);
 root = insert(root, data);
 } else if(choice == 2) {
 printf("Preorder Traversal: ");
 preorder(root);
 printf("\n");
 } else if(choice == 3) {
 printf("Enter key to search: ");
 scanf("%d", &key);
 found = search(root, key);
 if(found)
 printf("Key %d found in the BST.\n", key);
 else
 printf("Key %d not found in the BST.\n", key);
 } else if(choice == 4) {
 break;
 } else {
 printf("Invalid choice.\n");
 }
 }
 return 0;
}
```
---
### 3. BST – Create, Insert & Postorder Traversal 
**Functionality:** 
• Insert nodes into a BST and then display a postorder traversal.
```c
// File: BST_Postorder.c
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node *left, *right;
} Node;
Node* createNode(int data) {
 Node* newNode = malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
Node* insert(Node *root, int data) {
 if(root == NULL)
 return createNode(data);
 if(data < root->data)
 root->left = insert(root->left, data);
 else
 root->right = insert(root->right, data);
 return root;
}
void postorder(Node *root) {
 if(root) {
 postorder(root->left);
 postorder(root->right);
 printf("%d ", root->data);
 }
}
int main() {
 Node *root = NULL;
 int choice, data;
 
 while(1) {
 printf("\nBST Menu (Postorder Traversal):\n");
 printf("1. Insert Node\n");
 printf("2. Display Postorder Traversal\n");
 printf("3. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 if(choice == 1) {
 printf("Enter number to insert: ");
 scanf("%d", &data);
 root = insert(root, data);
 } else if(choice == 2) {
 printf("Postorder Traversal: ");
 postorder(root);
 printf("\n");
 } else if(choice == 3) {
 break;
 } else {
 printf("Invalid choice.\n");
 }
 }
 return 0;
}
```
---
### 4. BST – Count Leaf Nodes 
**Functionality:** 
• Build a BST and count the number of leaf nodes.
```c
// File: BST_CountLeafNodes.c
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node *left, *right;
} Node;
Node* createNode (int data) {
 Node* newNode = malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
Node* insert(Node *root, int data) {
 if(root == NULL)
 return createNode(data);
 if(data < root->data)
 root->left = insert(root->left, data);
 else
 root->right = insert(root->right, data);
 return root;
}
int countLeafNodes(Node *root) {
 if(root == NULL)
 return 0;
 if(root->left == NULL && root->right == NULL)
 return 1;
 return countLeafNodes(root->left) + countLeafNodes(root->right);
}
int main() {
 Node *root = NULL;
 int choice, data;
 
 while(1) {
 printf("\nBST Menu (Count Leaf Nodes):\n");
 printf("1. Insert Node\n");
 printf("2. Count Leaf Nodes\n");
 printf("3. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 if(choice == 1) {
 printf("Enter number to insert: ");
 scanf("%d", &data);
 root = insert(root, data);
 } else if(choice == 2) {
 printf("Total leaf nodes: %d\n", countLeafNodes(root));
 } else if(choice == 3) {
 break;
 } else {
 printf("Invalid choice.\n");
 }
 }
 return 0;
}
```
---
### 5. BST – Count Total Nodes 
**Functionality:** 
• Insert nodes into the BST and count the total number of nodes.
```c
// File: BST_CountTotalNodes.c
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
 int data;
 struct Node *left, *right;
} Node;
Node* createNode (int data) {
 Node* newNode = malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
Node* insert(Node *root, int data) {
 if(root == NULL)
 return createNode(data);
 if(data < root->data)
 root->left = insert(root->left, data);
 else
 root->right = insert(root->right, data);
 return root;
}
int countNodes(Node *root) {
 if(root == NULL)
 return 0;
 return 1 + countNodes(root->left) + countNodes(root->right);
}
int main() {
 Node *root = NULL;
 int choice, data;
 
 while(1) {
 printf("\nBST Menu (Count Total Nodes):\n");
 printf("1. Insert Node\n");
 printf("2. Count Total Nodes\n");
 printf("3. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 if(choice == 1) {
 printf("Enter number to insert: ");
 scanf("%d", &data);
 root = insert(root, data);
 } else if(choice == 2) {
 printf("Total nodes in BST: %d\n", countNodes(root));
 } else if(choice == 3) {
 break;
 } else {
 printf("Invalid choice.\n");
 }
 }
 return 0;
}
```
*****************************************************************************prisma
 #include <stdio.h>
 #include <limits.h>
 #define V 5
 int minKey(int key[], int mstSet[])
 {
 int min = INT_MAX, min_index;
 int v;
 for (v = 0; v < V; v++)
 if (mstSet[v] == 0 && key[v] < min)
 min = key[v], min_index = v;
 return min_index;
 }
 int printMST(int parent[], int n, int graph[V][V])
 {
 int i;
 printf("Edge Weight\n");
 for (i = 1; i < V; i++)
 printf("%d - %d %d \n", parent[i], i, graph[i][parent[i]]);
 }
 void primMST(int graph[V][V])
 {
 int parent[V];
 int key[V], i, v, count;
 int mstSet[V];
 for (i = 0; i < V; i++)
 key[i] = INT_MAX, mstSet[i] = 0;
 key[0] = 0;
 parent[0] = -1;

 for (count = 0; count < V - 1; count++)
 {
 int u = minKey(key, mstSet);
 mstSet[u] = 1;
 for (v = 0; v < V; v++)
 if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
 parent[v] = u, key[v] = graph[u][v];
 }
 printMST(parent, V, graph);
 }
 int main()
 {
 int graph[V][V] = { { 0, 2, 0, 6, 0 }, { 2, 0, 3, 8, 5 },
 { 0, 3, 0, 0, 7 }, { 6, 8, 0, 0, 9 }, { 0, 5, 7, 9, 0 }, };

 primMST(graph);
 return 0;
 }

***********************************************************************************topological sorting
#include <stdio.h>
#include <stdlib.h>

// Structure for an adjacency list node
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int v) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Function to perform topological sorting using Kahn's Algorithm
void topologicalSort(int vertices, Node** adjList, int* inDegree) {
    // Allocate memory for the queue used for vertices with in-degree 0
    int* queue = (int*)malloc(vertices * sizeof(int));
    int front = 0, rear = -1;

    // Enqueue all vertices with in-degree 0
    for (int i = 0; i < vertices; i++) {
        if (inDegree[i] == 0) {
            queue[++rear] = i;
        }
    }

    printf("Topological Order: ");
    while (front <= rear) {
        int currentVertex = queue[front++]; // Dequeue
        printf("%d ", currentVertex);

        // For each neighbour of currentVertex, reduce its in-degree by 1
        Node* temp = adjList[currentVertex];
        while (temp != NULL) {
            int neighbor = temp->vertex;
            inDegree[neighbor]--;
            // If in-degree becomes 0, add it to the queue
            if (inDegree[neighbor] == 0) {
                queue[++rear] = neighbor;
            }
            temp = temp->next;
        }
    }
    printf("\n");
    free(queue);
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Dynamically allocate memory for the adjacency list and in-degree array
    Node** adjList = (Node**)malloc(vertices * sizeof(Node*));
    int* inDegree = (int*)malloc(vertices * sizeof(int));

    // Initialize the adjacency list and in-degree array
    for (int i = 0; i < vertices; i++) {
        adjList[i] = NULL;
        inDegree[i] = 0;
    }

    printf("Enter each edge as a pair of integers (source destination):\n");
    // Input the edges
    for (int i = 0; i < edges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        // Create a new node for destination and add it at the head of the source list
        Node* newNode = createNode(dest);
        newNode->next = adjList[src];
        adjList[src] = newNode;
        // Increment in-degree of destination vertex
        inDegree[dest]++;
    }

    // Perform topological sort
    topologicalSort(vertices, adjList, inDegree);

    // Free the allocated memory for the adjacency list
    for (int i = 0; i < vertices; i++) {
        Node* temp = adjList[i];
        while (temp != NULL) {
            Node* toFree = temp;
            temp = temp->next;
            free(toFree);
        }
    }
    free(adjList);
    free(inDegree);

    return 0;
}
******************************************************************************************warshall for infinity
#include <stdio.h>
#define INF 99999    // Representation of infinity (no path)
#define MAX 100      // Maximum number of vertices

int main() {
    int n;
    int i, j, k;
    int cost[MAX][MAX];

    // Input: number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Input: the cost matrix
    // Use INF (99999) to represent no edge between vertices
    printf("Enter the cost matrix (use %d to represent infinity):\n", INF);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    // Floyd Warshall algorithm: update cost[i][j] with the shortest distance via intermediate vertices
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (cost[i][k] + cost[k][j] < cost[i][j]) {
                    cost[i][j] = cost[i][k] + cost[k][j];
                }
            }
        }
    }

    // Output: Print the shortest distances between every pair of vertices
    printf("Shortest path matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (cost[i][j] == INF)
                printf("INF ");
            else
                printf("%d ", cost[i][j]);
        }
        printf("\n");
    }

    return 0;
}
output: Enter the number of vertices: 4
Enter the cost matrix (use 99999 to represent infinity):
0 5 99999 10
99999 0 3 99999
99999 99999 0 1
99999 99999 99999 0

******************************************************************************************************krushkal
#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge in the graph
typedef struct Edge {
    int src, dest, weight;
} Edge;

// Structure to represent a graph with V vertices and E edges
typedef struct Graph {
    int V, E;
    Edge* edge;
} Graph;

// Function to create a graph with V vertices and E edges
Graph* createGraph(int V, int E) {
    Graph* graph = (Graph*) malloc(sizeof(Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (Edge*) malloc(E * sizeof(Edge));
    return graph;
}

// Structure to represent a subset for union-find
typedef struct Subset {
    int parent;
    int rank;
} Subset;

// A utility function to find set of an element i (uses path compression)
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// A function that does union of two sets of x and y (uses union by rank)
void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    
    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Compare function for qsort to sort edges by weight (non-decreasing)
int compareEdges(const void* a, const void* b) {
    Edge* a1 = (Edge*)a;
    Edge* b1 = (Edge*)b;
    return a1->weight - b1->weight;
}

// The main function to construct MST using Kruskal's algorithm
void kruskalMST(Graph* graph) {
    int V = graph->V;
    Edge result[V];  // This will store the resultant MST edges
    int e = 0;       // Index for result[]
    int i = 0;       // Index for sorted edges

    // Step 1: Sort all the edges in non-decreasing order of their weight
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), compareEdges);

    // Allocate memory for creating V subsets
    Subset *subsets = (Subset*) malloc(V * sizeof(Subset));
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Number of edges to be taken is equal to V-1
    while (e < V - 1 && i < graph->E) {
        // Step 2: Pick the smallest edge. And increment the index for next iteration.
        Edge next_edge = graph->edge[i++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        // If including this edge doesn't cause a cycle, include it in result
        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
        // Else discard the next_edge
    }

    // Print the contents of the MST using the result array
    printf("Following are the edges in the constructed MST:\n");
    int min_cost = 0;
    for (i = 0; i < e; ++i) {
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
        min_cost += result[i].weight;
    }
    printf("Minimum Cost Spanning Tree: %d\n", min_cost);

    // Free allocated memory
    free(subsets);
}

int main() {
    int V, E;
    
    // Input number of vertices and edges
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    Graph* graph = createGraph(V, E);

    // Read the edge information
    printf("Enter each edge in the format: <source> <destination> <weight>\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &graph->edge[i].src, &graph->edge[i].dest, &graph->edge[i].weight);
    }

    // Construct and display MST using Kruskal's algorithm
    kruskalMST(graph);

    // Free allocated space for graph edges and graph structure
    free(graph->edge);
    free(graph);

    return 0;
}
output : Enter number of vertices and edges: 4 5
Enter each edge in the format: <source> <destination> <weight>
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
*********************************************************************************djastra algorithm
#include <stdio.h>
#define INF 99999    // Represents infinity; use a high value to indicate no direct edge
#define MAX 100      // Maximum number of vertices

int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    int cost[MAX][MAX];
    printf("Enter the cost matrix (use %d to represent no edge/infinity):\n", INF);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    int source;
    printf("Enter the source vertex (0 to %d): ", V - 1);
    scanf("%d", &source);

    // Arrays to store the shortest distance from the source and the set of vertices included in the shortest path tree.
    int dist[MAX];
    int sptSet[MAX];  // sptSet[i] is 1 if vertex i is included in the shortest path tree

    // Initialize distances as INF and sptSet as 0 (false)
    for (int i = 0; i < V; i++) {
        dist[i] = INF;
        sptSet[i] = 0;
    }
    dist[source] = 0;  // Distance from source to itself is always 0

    // Dijkstra's algorithm: find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the vertex with the minimum distance value from the set of vertices not yet processed.
        int min = INF, min_index = -1;
        for (int v = 0; v < V; v++) {
            if (sptSet[v] == 0 && dist[v] <= min) {
                min = dist[v];
                min_index = v;
            }
        }

        int u = min_index;
        // Mark the selected vertex as processed.
        sptSet[u] = 1;

        // Update the distance value of the adjacent vertices of the selected vertex.
        for (int v = 0; v < V; v++) {
            // Update dist[v] only if:
            // 1. There is an edge from u to v (cost[u][v] != INF)
            // 2. Vertex v is not yet processed.
            // 3. There is a shorter path to v through u.
            if (!sptSet[v] && cost[u][v] != INF && dist[u] != INF &&
                dist[u] + cost[u][v] < dist[v]) {
                dist[v] = dist[u] + cost[u][v];
            }
        }
    }

    // Print the computed shortest distances from the source vertex.
    printf("\nVertex\tShortest Distance from Source %d\n", source);
    for (int i = 0; i < V; i++) {
        if (dist[i] == INF)
            printf("%d\t\tINF\n", i);
        else
            printf("%d\t\t%d\n", i, dist[i]);
    }

    return 0;
}
output:-
Enter the number of vertices: 5
Enter the cost matrix (use 99999 to represent no edge/infinity):
0 10 99999 5 99999
99999 0 1 2 99999
99999 99999 0 99999 4
99999 3 9 0 2
7 99999 6 99999 0
Enter the source vertex (0 to 4): 0

